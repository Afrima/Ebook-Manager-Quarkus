name: Build Service

on:
  push:
    branches: [ "*","**", "!main" ]
  pull_request:

jobs:
  yarn:
    name: cache node modules
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache node_modules
        uses: actions/cache@v3
        id: yarn-cache-node-modules
        with:
          path: src/frontend/node_modules
          key: ${{ runner.os }}-yarn-cache-${{ hashFiles('src/frontend/yarn.lock') }}
      - name: Yarn install if cache is invalid
        if: steps.yarn-cache-node-modules.outputs.cache-hit != 'true'
        working-directory: ./src/frontend
        run: yarn install
  lint:
    name: lint frontend
    runs-on: ubuntu-latest
    needs: [ yarn ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache node_modules
        uses: actions/cache@v3
        id: yarn-cache-node-modules
        with:
          path: src/frontend/node_modules
          key: ${{ runner.os }}-yarn-cache-${{ hashFiles('src/frontend/yarn.lock') }}
      - name: lint
        working-directory: ./src/frontend
        run: npm run lint
  frontend_build:
    name: build frontend
    needs: [ yarn, lint ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache node_modules
        uses: actions/cache@v3
        id: yarn-cache-node-modules
        with:
          path: src/frontend/node_modules
          key: ${{ runner.os }}-yarn-cache-${{ hashFiles('src/frontend/yarn.lock') }}
      - name: build vite
        working-directory: ./src/frontend
        run: npm run build
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend
          path: src/frontend/dist
  backend_build:
    name: build backend
    runs-on: ubuntu-latest
    needs: [ frontend_build ]
    outputs:
      version: ${{ steps.semantic.outputs.release-version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: github login
        run: echo ${{ secrets.DOCKER_TOKEN }} | docker login --username ${{ secrets.DOCKER_USER }} --password-stdin
      - uses: actions/download-artifact@v3
        with:
          name: frontend
          path: ./src/main/resources/META-INF/resources
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build dev with Maven
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B install org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=Ebook-Manager -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco-report/jacoco.xml -Dquarkus.container-image.tag=develop -Dquarkus.container-image.group=${{ secrets.DOCKER_USER }} -Dquarkus.container-image.build=true -Dquarkus.container-image.push=true -DskipTests
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: frontend
