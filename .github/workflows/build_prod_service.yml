name: Build-Prod Service

on:
  push:
    branches:
      - 'main'

jobs:
  yarn:
    name: cache node modules
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache node_modules
        uses: actions/cache@v3
        id: yarn-cache-node-modules
        with:
          path: src/frontend/node_modules
          key: ${{ runner.os }}-yarn-cache-${{ hashFiles('src/frontend/yarn.lock') }}
      - name: Yarn install if cache is invalid
        if: steps.yarn-cache-node-modules.outputs.cache-hit != 'true'
        working-directory: ./src/frontend
        run: yarn install
  lint:
    name: lint frontend
    runs-on: ubuntu-latest
    needs: [ yarn ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache node_modules
        uses: actions/cache@v3
        id: yarn-cache-node-modules
        with:
          path: src/frontend/node_modules
          key: ${{ runner.os }}-yarn-cache-${{ hashFiles('src/frontend/yarn.lock') }}
      - name: lint
        working-directory: ./src/frontend
        run: npm run lint
  frontend_build:
    name: build frontend
    runs-on: ubuntu-latest
    needs: [ yarn, lint ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache node_modules
        uses: actions/cache@v3
        id: yarn-cache-node-modules
        with:
          path: src/frontend/node_modules
          key: ${{ runner.os }}-yarn-cache-${{ hashFiles('src/frontend/yarn.lock') }}
      - name: build vite
        working-directory: ./src/frontend
        run: npm run build
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend
          path: src/frontend/dist
  backend_build:
    name: build backend
    runs-on: ubuntu-latest
    needs: [frontend_build]
    outputs:
      version: ${{ steps.semantic.outputs.release-version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - uses: actions/download-artifact@v3
        with:
          name: frontend
          path: ./src/main/resources/META-INF/resources
      - name: Semantic Pre-Release Action
        id: semantic
        uses: codfish/semantic-release-action@v2
        with:
          branches: main
          dry_run: true
          additional_packages: |
            ['@semantic-release/git']
          plugins: |
            ['@semantic-release/commit-analyzer', '@semantic-release/release-notes-generator', '@semantic-release/github', '@semantic-release/git']
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew clean spotlessJavaCheck test sonar build -Dquarkus.container-image.build=true -Dquarkus.container-image.group=${{ secrets.DOCKER_USER }} -Dquarkus.container-image.push=true -Dquarkus.container-image.tag=${{ steps.semantic.outputs.release-version  }} -Dquarkus.container-image.additional-tags=latest
      - name: Semantic Release Action
        uses: codfish/semantic-release-action@v2
        with:
          branches: main
          dry_run: false
          additional_packages: |
            ['@semantic-release/git']
          plugins: |
            ['@semantic-release/commit-analyzer', '@semantic-release/release-notes-generator', '@semantic-release/github', '@semantic-release/git']
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: geekyeggo/delete-artifact@v4
        with:
          name: frontend
  deploy:
    name: deploy
    runs-on: ubuntu-latest
    needs: [ backend_build ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Deploy stack to Portainer
        uses: carlrygart/portainer-stack-deploy@v1
        with:
          portainer-host: ${{ secrets.PORTAINER_HOST }}
          username: ${{ secrets.PORTAINER_USERNAME }}
          password: ${{ secrets.PORTAINER_PASSWORD }}
          stack-name: 'ebooks'
          stack-definition: 'stack-definition.yaml'
          template-variables: >
            {
              "version": "${{ needs.backend_build.outputs.version }}", 
              "username": "${{ secrets.DOCKER_USER }}", 
              "db_username": "${{ secrets.DB_USER }}", 
              "db_password": "${{ secrets.DB_PASSWORD }}",
              "login_salt": "${{ secrets.LOGIN_SALT }}", 
              "admin_username": "${{ secrets.ADMIN_USERNAME }}", 
              "admin_password": "${{ secrets.ADMIN_PASSWORD }}",
              "mount_folder": "/volume1/docker/ebook",
              "port": "1243"
            }
