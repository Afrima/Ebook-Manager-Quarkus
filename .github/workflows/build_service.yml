name: Build Service

on:
  pull_request:
  push:
    branches:
      - 'develop'
      - 'main'

jobs:
  dry-release:
    name: dry release
    uses: mathieu-keller/github-action-workflows/.github/workflows/semantic-release.yaml@1.0.1
    with:
      release-branch: main
      dry: true
  version-echo:
    runs-on: ubuntu-latest
    needs: [dry-release]
    steps:
      - name: echo
        run: echo ${{ needs.dry-release.outputs.new_version }}
  yarn:
    name: cache node modules
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache node_modules
        uses: actions/cache@v3
        id: yarn-cache-node-modules
        with:
          path: src/frontend/node_modules
          key: ${{ runner.os }}-yarn-cache-${{ hashFiles('src/frontend/yarn.lock') }}
      - name: Yarn install if cache is invalid
        if: steps.yarn-cache-node-modules.outputs.cache-hit != 'true'
        working-directory: ./src/frontend
        run: yarn install
  lint:
    name: lint frontend
    runs-on: ubuntu-latest
    needs: [ yarn ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache node_modules
        uses: actions/cache@v3
        id: yarn-cache-node-modules
        with:
          path: src/frontend/node_modules
          key: ${{ runner.os }}-yarn-cache-${{ hashFiles('src/frontend/yarn.lock') }}
      - name: lint
        working-directory: ./src/frontend
        run: npm run lint
  frontend_build:
    name: build frontend
    needs: [ yarn ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache node_modules
        uses: actions/cache@v3
        id: yarn-cache-node-modules
        with:
          path: src/frontend/node_modules
          key: ${{ runner.os }}-yarn-cache-${{ hashFiles('src/frontend/yarn.lock') }}
      - name: build vite
        working-directory: ./src/frontend
        run: npm run build
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend
          path: src/frontend/dist
  backend_build:
    name: build backend
    runs-on: ubuntu-latest
    needs: [ frontend_build, lint, dry-release ]
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - uses: actions/download-artifact@v4
        with:
          name: frontend
          path: ./src/main/resources/META-INF/resources
      - name: Build
        run: ./gradlew clean spotlessJavaCheck test build -Dquarkus.container-image.build=true -Dquarkus.container-image.tag=${{ needs.dry-release.outputs.new_version }} -Dquarkus.container-image.group=${{ secrets.DOCKER_USER }} -Dquarkus.container-image.additional-tags=${{github.ref == 'refs/heads/develop' && 'latest-dev' || 'latest' }} -Dquarkus.container-image.push=true
      - uses: geekyeggo/delete-artifact@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: frontend
  release:
    name: create release
    needs: [ backend_build, frontend_build, lint, dry-release ]
    if: ${{ github.ref == 'refs/heads/main' }}
    uses: mathieu-keller/github-action-workflows/.github/workflows/semantic-release.yaml@1.0.1
    with:
      release-branch: main
      dry: false
  deploy:
    name: deploy
    if: ${{ github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: [ backend_build, dry-release  ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Deploy stack to Portainer
        uses: carlrygart/portainer-stack-deploy@v1
        with:
          portainer-host: ${{ secrets.PORTAINER_HOST }}
          username: ${{ secrets.PORTAINER_USERNAME }}
          password: ${{ secrets.PORTAINER_PASSWORD }}
          stack-name: ${{github.ref == 'refs/heads/develop' && 'dev-ebooks' || 'ebooks'}}
          stack-definition: 'stack-definition.yaml'
          template-variables: >
            {
              "version": "${{ needs.dry-release.outputs.new_version }}", 
              "username": "${{ secrets.DOCKER_USER }}", 
              "db_username": "${{ secrets.DB_USER }}", 
              "db_password": "${{ secrets.DB_PASSWORD }}",
              "login_salt": "${{ secrets.LOGIN_SALT }}", 
              "admin_username": "${{ secrets.ADMIN_USERNAME }}", 
              "admin_password": "${{ secrets.ADMIN_PASSWORD }}",
              "mount_folder": "${{github.ref == 'refs/heads/develop' && '/volume1/docker/dev-ebook' || '/volume1/docker/ebook'}}",
              "port": "${{github.ref == 'refs/heads/develop' && '1242' || '1243'}}"
            }
